//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISBank_Assessment.DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using SqlProviderServices = System.Data.Entity.SqlServer.SqlProviderServices;
    using ISBank_Assessment.BE;
    public partial class InteractiveSolutionsBankEntities : DbContext
    {
        public InteractiveSolutionsBankEntities()
            : base("name=InteractiveSolutionsBankEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<stpGetAllTransactions_Result> stpGetAllTransactions(string accountCode)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stpGetAllTransactions_Result>("stpGetAllTransactions", accountCodeParameter);
        }
    
        public virtual int stpUpdateAccountBalance(string accountNumber1, string accountNumber2, Nullable<decimal> amount)
        {
            var accountNumber1Parameter = accountNumber1 != null ?
                new ObjectParameter("AccountNumber1", accountNumber1) :
                new ObjectParameter("AccountNumber1", typeof(string));
    
            var accountNumber2Parameter = accountNumber2 != null ?
                new ObjectParameter("AccountNumber2", accountNumber2) :
                new ObjectParameter("AccountNumber2", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stpUpdateAccountBalance", accountNumber1Parameter, accountNumber2Parameter, amountParameter);
        }
    }
}
