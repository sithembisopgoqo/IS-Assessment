// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Account.
    /// </summary>
    public static partial class AccountExtensions
    {
            /// <summary>
            /// Returns a list of all available AccountEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            public static IList<AccountEntity> GetAllPersonAccounts(this IAccount operations, int userId, string searchText = default(string))
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAllPersonAccountsAsync(userId, searchText), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all available AccountEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AccountEntity>> GetAllPersonAccountsAsync(this IAccount operations, int userId, string searchText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPersonAccountsWithHttpMessagesAsync(userId, searchText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all available AccountEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personCode'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            public static IList<AccountEntity> GetAllAccounts(this IAccount operations, int personCode, string searchText = default(string))
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAllAccountsAsync(personCode, searchText), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all available AccountEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personCode'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AccountEntity>> GetAllAccountsAsync(this IAccount operations, int personCode, string searchText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllAccountsWithHttpMessagesAsync(personCode, searchText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all available AccountEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            public static AccountEntity GetAccounts(this IAccount operations, int code)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAccountsAsync(code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all available AccountEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountEntity> GetAccountsAsync(this IAccount operations, int code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccountsWithHttpMessagesAsync(code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single AccountEntity for the specified Person
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// Code of the Person to retrieve results for
            /// </param>
            /// <param name='personCode'>
            /// </param>
            public static AccountEntity GetAccountByPersonCode(this IAccount operations, int code, int personCode)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAccountByPersonCodeAsync(code, personCode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single AccountEntity for the specified Person
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// Code of the Person to retrieve results for
            /// </param>
            /// <param name='personCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountEntity> GetAccountByPersonCodeAsync(this IAccount operations, int code, int personCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccountByPersonCodeWithHttpMessagesAsync(code, personCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a AccountEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountObj'>
            /// AccountEntity object to add
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static AccountEntity AddAccount(this IAccount operations, AccountEntity accountObj, int userId)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).AddAccountAsync(accountObj, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a AccountEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountObj'>
            /// AccountEntity object to add
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountEntity> AddAccountAsync(this IAccount operations, AccountEntity accountObj, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAccountWithHttpMessagesAsync(accountObj, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modify a AccountEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountObj'>
            /// AccountEntity object to modify
            /// </param>
            /// <param name='code'>
            /// </param>
            public static AccountEntity ModifyAccount(this IAccount operations, AccountEntity accountObj, int code)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).ModifyAccountAsync(accountObj, code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify a AccountEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountObj'>
            /// AccountEntity object to modify
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountEntity> ModifyAccountAsync(this IAccount operations, AccountEntity accountObj, int code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModifyAccountWithHttpMessagesAsync(accountObj, code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            public static object RemoveAccount(this IAccount operations, int code)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).RemoveAccountAsync(code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveAccountAsync(this IAccount operations, int code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveAccountWithHttpMessagesAsync(code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Change Account Status by Code and Status Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='statusId'>
            /// </param>
            public static object ChangeAccountStatus(this IAccount operations, int code, int statusId)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).ChangeAccountStatusAsync(code, statusId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Change Account Status by Code and Status Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='statusId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ChangeAccountStatusAsync(this IAccount operations, int code, int statusId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeAccountStatusWithHttpMessagesAsync(code, statusId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check Person Account Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            public static bool? CheckPersonAccounttStatus(this IAccount operations, string accountNumber)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).CheckPersonAccounttStatusAsync(accountNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check Person Account Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckPersonAccounttStatusAsync(this IAccount operations, string accountNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckPersonAccounttStatusWithHttpMessagesAsync(accountNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check If Account Is Open/Closed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            public static bool? CheckIfAccountIsOpenClosed(this IAccount operations, string accountNumber)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).CheckIfAccountIsOpenClosedAsync(accountNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check If Account Is Open/Closed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckIfAccountIsOpenClosedAsync(this IAccount operations, string accountNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckIfAccountIsOpenClosedWithHttpMessagesAsync(accountNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if Account Balance is greater then 0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            public static bool? CheckAccountBalance(this IAccount operations, string accountNumber)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).CheckAccountBalanceAsync(accountNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if Account Balance is greater then 0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckAccountBalanceAsync(this IAccount operations, string accountNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckAccountBalanceWithHttpMessagesAsync(accountNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of all available TransactionsEntity for the specified
            /// Acccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountCode'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            public static IList<TransactionsEntity> GetAllTransactions(this IAccount operations, int accountCode, string searchText = default(string))
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAllTransactionsAsync(accountCode, searchText), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all available TransactionsEntity for the specified
            /// Acccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountCode'>
            /// </param>
            /// <param name='searchText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TransactionsEntity>> GetAllTransactionsAsync(this IAccount operations, int accountCode, string searchText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTransactionsWithHttpMessagesAsync(accountCode, searchText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single TransactionsEntity for the specified Acccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            public static TransactionsEntity GetTransactionbyCode(this IAccount operations, int code)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetTransactionbyCodeAsync(code), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single TransactionsEntity for the specified Acccount
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionsEntity> GetTransactionbyCodeAsync(this IAccount operations, int code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionbyCodeWithHttpMessagesAsync(code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a TransactionsEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionObj'>
            /// TransactionsEntity object to add
            /// </param>
            public static TransactionsEntity AddTransaction(this IAccount operations, TransactionsEntity transactionObj)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).AddTransactionAsync(transactionObj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a TransactionsEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionObj'>
            /// TransactionsEntity object to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionsEntity> AddTransactionAsync(this IAccount operations, TransactionsEntity transactionObj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTransactionWithHttpMessagesAsync(transactionObj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modify a TransactionsEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountObj'>
            /// TransactionsEntity object to modify
            /// </param>
            public static TransactionsEntity ModifyTransaction(this IAccount operations, TransactionsEntity accountObj)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).ModifyTransactionAsync(accountObj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify a TransactionsEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountObj'>
            /// TransactionsEntity object to modify
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionsEntity> ModifyTransactionAsync(this IAccount operations, TransactionsEntity accountObj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModifyTransactionWithHttpMessagesAsync(accountObj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks if the Transaction Amount Value is 0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='amount'>
            /// </param>
            public static bool? CheckTransactionAmountValue(this IAccount operations, double amount)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).CheckTransactionAmountValueAsync(amount), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if the Transaction Amount Value is 0
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckTransactionAmountValueAsync(this IAccount operations, double amount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckTransactionAmountValueWithHttpMessagesAsync(amount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single StatusEntity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statusId'>
            /// </param>
            public static IList<StatusEntity> GetStatusById(this IAccount operations, int statusId)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetStatusByIdAsync(statusId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single StatusEntity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='statusId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StatusEntity>> GetStatusByIdAsync(this IAccount operations, int statusId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusByIdWithHttpMessagesAsync(statusId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
