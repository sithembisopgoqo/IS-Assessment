// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Person.
    /// </summary>
    public static partial class PersonExtensions
    {
            /// <summary>
            /// Returns a list of all available PersonEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id of the User to retrieve results for
            /// </param>
            /// <param name='searchText'>
            /// </param>
            public static IList<PersonEntity> GetAllPersons(this IPerson operations, int userId, string searchText = default(string))
            {
                return Task.Factory.StartNew(s => ((IPerson)s).GetAllPersonsAsync(userId, searchText), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of all available PersonEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// User Id of the User to retrieve results for
            /// </param>
            /// <param name='searchText'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PersonEntity>> GetAllPersonsAsync(this IPerson operations, int userId, string searchText = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPersonsWithHttpMessagesAsync(userId, searchText, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single PersonEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// Code of the Person to retrieve results for
            /// </param>
            /// <param name='userId'>
            /// UserId Id of the User to retrieve results for
            /// </param>
            public static PersonEntity GetPersonbyUserId(this IPerson operations, int code, int userId)
            {
                return Task.Factory.StartNew(s => ((IPerson)s).GetPersonbyUserIdAsync(code, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single PersonEntity for the specified User
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// Code of the Person to retrieve results for
            /// </param>
            /// <param name='userId'>
            /// UserId Id of the User to retrieve results for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonEntity> GetPersonbyUserIdAsync(this IPerson operations, int code, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonbyUserIdWithHttpMessagesAsync(code, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a PersonEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personObj'>
            /// </param>
            public static PersonEntity AddPerson(this IPerson operations, PersonEntity personObj)
            {
                return Task.Factory.StartNew(s => ((IPerson)s).AddPersonAsync(personObj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a PersonEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personObj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonEntity> AddPersonAsync(this IPerson operations, PersonEntity personObj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPersonWithHttpMessagesAsync(personObj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modify a PersonEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personObj'>
            /// </param>
            public static PersonEntity ModifyPerson(this IPerson operations, PersonEntity personObj)
            {
                return Task.Factory.StartNew(s => ((IPerson)s).ModifyPersonAsync(personObj), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Modify a PersonEntity object
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personObj'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonEntity> ModifyPersonAsync(this IPerson operations, PersonEntity personObj, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModifyPersonWithHttpMessagesAsync(personObj, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes PersonEntity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static PersonEntity RemovePerson(this IPerson operations, int code, int userId)
            {
                return Task.Factory.StartNew(s => ((IPerson)s).RemovePersonAsync(code, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes PersonEntity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersonEntity> RemovePersonAsync(this IPerson operations, int code, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemovePersonWithHttpMessagesAsync(code, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks Person Acccount Exist
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static bool? CheckPersonAccountExist(this IPerson operations, int code, int userId)
            {
                return Task.Factory.StartNew(s => ((IPerson)s).CheckPersonAccountExistAsync(code, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks Person Acccount Exist
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckPersonAccountExistAsync(this IPerson operations, int code, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckPersonAccountExistWithHttpMessagesAsync(code, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks Person Acccount Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static bool? CheckPersonAccounttStatus(this IPerson operations, int code, int userId)
            {
                return Task.Factory.StartNew(s => ((IPerson)s).CheckPersonAccounttStatusAsync(code, userId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks Person Acccount Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CheckPersonAccounttStatusAsync(this IPerson operations, int code, int userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckPersonAccounttStatusWithHttpMessagesAsync(code, userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
