// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace WebAPI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Access.
    /// </summary>
    public static partial class AccessExtensions
    {
            /// <summary>
            /// Checks if the user password is correct
            /// </summary>
            /// Checks if the user password is correct
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='email'>
            /// Email
            /// </param>
            public static bool? IsValidPassword(this IAccess operations, string password, string email)
            {
                return Task.Factory.StartNew(s => ((IAccess)s).IsValidPasswordAsync(password, email), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if the user password is correct
            /// </summary>
            /// Checks if the user password is correct
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='email'>
            /// Email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> IsValidPasswordAsync(this IAccess operations, string password, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsValidPasswordWithHttpMessagesAsync(password, email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate User Login
            /// </summary>
            /// Validate User Login
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// Email
            /// </param>
            /// <param name='password'>
            /// </param>
            public static bool? ValidateUserLogin(this IAccess operations, string email, string password)
            {
                return Task.Factory.StartNew(s => ((IAccess)s).ValidateUserLoginAsync(email, password), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate User Login
            /// </summary>
            /// Validate User Login
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// Email
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ValidateUserLoginAsync(this IAccess operations, string email, string password, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateUserLoginWithHttpMessagesAsync(email, password, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get LoggedIn user
            /// </summary>
            /// Finds the LoggedIn user
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// Email
            /// </param>
            public static UserEntity GetLoginUser(this IAccess operations, string userName)
            {
                return Task.Factory.StartNew(s => ((IAccess)s).GetLoginUserAsync(userName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get LoggedIn user
            /// </summary>
            /// Finds the LoggedIn user
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// Email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntity> GetLoginUserAsync(this IAccess operations, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLoginUserWithHttpMessagesAsync(userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the login count of the logged in user by 1
            /// </summary>
            /// Updates the login count of the logged in user by 1
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static int? UpdateLoginCount(this IAccess operations)
            {
                return Task.Factory.StartNew(s => ((IAccess)s).UpdateLoginCountAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the login count of the logged in user by 1
            /// </summary>
            /// Updates the login count of the logged in user by 1
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> UpdateLoginCountAsync(this IAccess operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLoginCountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new user
            /// </summary>
            /// Adds a new User
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User to add
            /// </param>
            public static UserEntity AddUser(this IAccess operations, UserEntity user)
            {
                return Task.Factory.StartNew(s => ((IAccess)s).AddUserAsync(user), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new user
            /// </summary>
            /// Adds a new User
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// User to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntity> AddUserAsync(this IAccess operations, UserEntity user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
